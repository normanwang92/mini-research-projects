# getSymbols(sym,
#            auto.assign=FALSE,
#            from=start_date,
#            to=as.Date(end_date)+1,
#            src="yahoo"
# )
tryCatch(
getSymbols(sym,
auto.assign=FALSE,
from=start_date,
to=as.Date(end_date)+1,
src="yahoo"
),
error=function(cond){
message(cond)
message("Return emtpy dataframe.")
col_names <- c(".Open",".High",".Low",".Close",".Volume",".Adjusted")
col_names <- paste(sym,col_names,sep = "")
empty_df <- as.data.frame(matrix(ncol = 6, nrow = length(tf)), row.names = tf)
empty_df <- set_names(empty_df,col_names)
return(empty_df)
}
)
}
## expand on current zoo series of daily prices and volume for single stock
update_single_stock <-
function(sym, ts_series, start_date, end_date){
previous_start <- index(ts_series)[1]
previous_end <- tail(index(ts_series),1)
if(start_date < previous_start){
end_date_to_bind <- as.Date(previous_start, format="%Y-%m-%d")-1
data_to_bind <-
get_single_stock(sym, start_date = start_date, end_date = end_date_to_bind)
ts_series <- rbind(data_to_bind, ts_series)
}
if(end_date > previous_end){
start_date_to_bind <- as.Date(previous_end, format="%Y-%m-%d")+1
data_to_bind <-
get_single_stock(sym, start_date = start_date_to_bind, end_date = end_date)
ts_series <- rbind(ts_series, data_to_bind)
}
return(ts_series)
}
## get daily prices and volumes for all stocks
get_all_stocks <-
function(syms = sp_symbols(), start_date, end_date, save_file = TRUE, return_file = FALSE) {
stopifnot(start_date <= end_date)
all_data <- list()
for(s in syms){
single_data <- get_single_stock(sym = s, start_date = start_date, end_date = end_date)
if(!is.null(single_data)) {
all_data[[s]] <- single_data
}
}
if(save_file){
saveRDS(all_data, file = DB_NAME)
}
if(return_file){
return(all_data)
}
}
update_all_stocks <-
function(syms = sp_symbols(), existing_data = readRDS(DB_NAME), start_date, end_date) {
# existing_data <- load(file)
existing_names <- names(existing_data)
names_to_add <- setdiff(syms, existing_names)
names_to_remove <- setdiff(existing_names, syms)
## removing data if name no longer listed
if (length(names_to_remove) != 0){
existing_data <- existing_data[!existing_names %in% names_to_remove]
existing_names <- names(existing_data)
}
## expanding data for existing names
for(s in existing_names) {
# print("updating %s", s)
existing_data[[s]] <- update_single_stock(s,existing_data[[s]],start_date,end_date)
}
## adding data for new names
if (length(names_to_add) != 0){
new_data <- get_all_stocks(names_to_add,
start_date,
end_date,
save_file = FALSE,
return_file = TRUE)
existing_data <- c(existing_data, new_data)
}
## updating database
# saveRDS(existing_data, file = DB_NAME)
#
return(existing_data)
}
get_single_stock("BHF", "2017-01-03", "2017-01-03")
get_all_stocks(start_date = "2017-01-03",end_date = "2017-01-03",save_file = FALSE,return_file = TRUE)
get_all_stocks(start_date = "2017-01-03",end_date = "2017-01-10",save_file = TRUE, return_file = FALSE)
runApp()
runApp()
correlation <- function(stock_data, start_date, end_date){
clean_close_price <- format_close_price(stock_data)
sliced_price_df <- slicing_data(clean_close_price, start_date, end_date)
sliced_return_df <- sliced_price_df[-1,]/sliced_price_df[1:(dim(sliced_price_df)[1]-1),] - 1
sliced_return_df[is.na(sliced_return_df)] <- -999.0
corr <- cor(sliced_return_df)
return(corr)
}
correlation(readRDS(DB_NAME),"2017-01-01","2017-01-10")
format_close_price <- function(stock_data = stock_data){
df <- as.data.frame(do.call(cbind,stock_data))
close_price_df <- df[grepl('Adjusted{1}$',colnames(df))]
col_names <- colnames(close_price_df)
# colnames(close_price_df) <- strsplit(colnames(close_price_df),".",fixed = TRUE)[[1]][1]
colnames(close_price_df) <- lapply(col_names, function(u) strsplit(u,".",fixed = TRUE)[[1]][1])
close_price_df[is.na(close_price_df)] <- 0
return(close_price_df)
}
slicing_data <- function(df, start_date, end_date){
time_frame <- rownames(df)
biz_start <- time_frame[time_frame >= start_date][1]
biz_end <- tail(time_frame[time_frame <= end_date],1)
biz_start_idx <- which(time_frame == biz_start)
biz_end_idx <- which(time_frame == biz_end)
return(as.data.frame(t(t(df)[, biz_start_idx:biz_end_idx])))
}
correlation <- function(stock_data, start_date, end_date){
clean_close_price <- format_close_price(stock_data)
sliced_price_df <- slicing_data(clean_close_price, start_date, end_date)
sliced_return_df <- sliced_price_df[-1,]/sliced_price_df[1:(dim(sliced_price_df)[1]-1),] - 1
sliced_return_df[is.na(sliced_return_df)] <- -999.0
corr <- cor(sliced_return_df)
return(corr)
}
correlation(readRDS(DB_NAME),"2017-01-01","2017-01-10")
readRDS(DB_NAME)
correlation(readRDS(DB_NAME),"2017-01-01","2017-01-10")
adj_close_price <- format_close_price(readRDS(DB_NAME))
tickers <- sp_symbols()
stock_data <- readRDS(DB_NAME)
as.data.frame(do.call(cbind,stock_data))
stock_data
class(stock_data)
do.call(cbind,stock_data)
df <- as.data.frame(do.call(cbind,stock_data))
View(df)
stock_data$BHF
stock_data[is.na(stock_data)] <- -999.0
df <- as.data.frame(do.call(cbind,stock_data))
View(df)
stock_data$BHF
c()
c(c(1,2),3)
c(c(1,2), NULL)
is.na(stock_data$BHF)
all(is.na(stock_data$BHF))
library(Quandl)
library(rvest)
library(chron)
library(timeDate)
# Set the working directory
setwd("/Users/Norman/Documents/GitHub/INVESCO/Q1")
DB_NAME = "sp_data.rds"
## setting up Quandl
quandl_api = "JXaNY6Li64nKFE2zXH6u"
Quandl.api_key(quandl_api)
## getting sp 500 constituents
sp_symbols <- function(){
sp500_wiki <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")
symbols_table <- sp500_wiki %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
html_table(fill = TRUE)
symbols_table <- symbols_table[[1]]
symbols <- as.character(symbols_table$`Ticker symbol`)
symbols <- gsub(".","-",symbols,fixed = TRUE)
return(symbols)
}
## getting daily prices and volume for one stock
get_single_stock <-
function(sym, start_date, end_date) {
# make sure start_date is no greater than end_date
#   if start_date is same as end_date, make sure it's business day
stopifnot(start_date <= end_date)
tf <- seq(as.Date(start_date), as.Date(end_date),by = 1)
tf <- tf[isBizday(timeDate(tf), holidays = holidayNYSE(1975:2018), wday = 1:5)]
if(length(tf) == 0){
return()
}
start_date <- tf[1]
end_date <- tail(tf,1)
require(devtools)
tryCatch(
getSymbols(sym,
auto.assign=FALSE,
from=start_date,
to=as.Date(end_date)+1,
src="yahoo"
),
error=function(cond){
message(cond)
message("\nReturn dataframe filled by -999.0.")
col_names <- c(".Open",".High",".Low",".Close",".Volume",".Adjusted")
col_names <- paste(sym,col_names,sep = "")
empty_df <- as.data.frame(matrix(data = -999.0, ncol = 6, nrow = length(tf)),
row.names = tf)
empty_df <- set_names(empty_df,col_names)
return(empty_df)
}
)
}
## expand on current zoo series of daily prices and volume for single stock
update_single_stock <-
function(sym, ts_series, start_date, end_date){
previous_start <- index(ts_series)[1]
previous_end <- tail(index(ts_series),1)
if(start_date < previous_start){
end_date_to_bind <- as.Date(previous_start, format="%Y-%m-%d")-1
data_to_bind <-
get_single_stock(sym, start_date = start_date, end_date = end_date_to_bind)
ts_series <- rbind(data_to_bind, ts_series)
}
if(end_date > previous_end){
start_date_to_bind <- as.Date(previous_end, format="%Y-%m-%d")+1
data_to_bind <-
get_single_stock(sym, start_date = start_date_to_bind, end_date = end_date)
ts_series <- rbind(ts_series, data_to_bind)
}
return(ts_series)
}
## get daily prices and volumes for all stocks
get_all_stocks <-
function(syms = sp_symbols(), start_date, end_date, save_file = TRUE, return_file = FALSE) {
stopifnot(start_date <= end_date)
all_data <- list()
for(s in syms){
single_data <- get_single_stock(sym = s, start_date = start_date, end_date = end_date)
if(!is.null(single_data)) {
all_data[[s]] <- single_data
}
}
if(save_file){
saveRDS(all_data, file = DB_NAME)
}
if(return_file){
return(all_data)
}
}
update_all_stocks <-
function(syms = sp_symbols(), existing_data = readRDS(DB_NAME), start_date, end_date) {
# existing_data <- load(file)
existing_names <- names(existing_data)
names_to_add <- setdiff(syms, existing_names)
names_to_remove <- setdiff(existing_names, syms)
## removing data if name no longer listed
if (length(names_to_remove) != 0){
existing_data <- existing_data[!existing_names %in% names_to_remove]
existing_names <- names(existing_data)
}
## expanding data for existing names
for(s in existing_names) {
# print("updating %s", s)
existing_data[[s]] <- update_single_stock(s,existing_data[[s]],start_date,end_date)
}
## adding data for new names
if (length(names_to_add) != 0){
new_data <- get_all_stocks(names_to_add,
start_date,
end_date,
save_file = FALSE,
return_file = TRUE)
existing_data <- c(existing_data, new_data)
}
## updating database
# saveRDS(existing_data, file = DB_NAME)
#
return(existing_data)
}
get_all_stocks(start_date = "2017-01-03",end_date = "2017-01-07",save_file = TRUE, return_file = FALSE)
runApp()
stock_data$BHF
readRDS(DB_NAME)
readRDS(DB_NAME)$BHF
tickers <- sp_symbols()
stock_data <- readRDS(DB_NAME)
format_close_price()
format_close_price(stock_data)
as.data.frame(do.call(cbind,stock_data))
df <- as.data.frame(do.call(cbind,stock_data))
View(df)
View(df)
do.call(cbind,stock_data)
stock_data$BHF
stock_data$MMM
dim(stock_data)
sapply(stock_data,length)
do.call(cbind,stock_data[1:4])
runApp()
get_all_stocks(start_date = "2017-01-03",end_date = "2017-01-07",save_file = TRUE, return_file = FALSE)
runApp()
stock_data <- readRDS(DB_NAME)
names(stock_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
session_info()
runApp()
runApp()
tickers <- sp_symbols()
stock_data <- readRDS(DB_NAME)
# tickers <- names(stock_data) ## for testing only
format_close_price <- function(stock_data = stock_data){
df <- as.data.frame(do.call(cbind,stock_data))
close_price_df <- df[grepl('Adjusted{1}$',colnames(df))]
col_names <- colnames(close_price_df)
# colnames(close_price_df) <- strsplit(colnames(close_price_df),".",fixed = TRUE)[[1]][1]
colnames(close_price_df) <- lapply(col_names, function(u) strsplit(u,".",fixed = TRUE)[[1]][1])
close_price_df[is.na(close_price_df)] <- 0
close_price_df <- close_price_df[, colSums(close_price_df != 0) > 0]
return(close_price_df)
}
slicing_data <- function(df, start_date, end_date){
time_frame <- rownames(df)
biz_start <- time_frame[time_frame >= start_date][1]
biz_end <- tail(time_frame[time_frame <= end_date],1)
biz_start_idx <- which(time_frame == biz_start)
biz_end_idx <- which(time_frame == biz_end)
return(as.data.frame(t(t(df)[, biz_start_idx:biz_end_idx])))
}
correlation <- function(stock_data, start_date, end_date){
adj_close_price <- format_close_price(stock_data)
sliced_price_df <- slicing_data(adj_close_price, start_date, end_date)
sliced_return_df <- sliced_price_df[-1,]/sliced_price_df[1:(dim(sliced_price_df)[1]-1),] - 1
sliced_return_df[is.na(sliced_return_df)] <- 0
corr <- cor(sliced_return_df)
return(corr)
}
correlation(stock_data,"2017-01-01","2017-01-10")
df<-correlation(stock_data,"2017-01-01","2017-01-10")
View(df)
View(df)
colSums(df != 0)
df != 0
dim(df != 0)
colSums(df != 0) > 0
update_all_stocks(start_date = "2017-01-10",end_date = "2017-01-14")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
readRDS(DB_NAME)$MMM
index(readRDS(DB_NAME)$MMM)
index(readRDS(DB_NAME)$MMM)[1]
index(readRDS(DB_NAME)[["MMM"]])[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
readRDS(DB_NAME)$WELL
format_close_price <- function(stock_data = stock_data){
df <- as.data.frame(do.call(cbind,stock_data))
close_price_df <- df[grepl('Adjusted{1}$',colnames(df))]
col_names <- colnames(close_price_df)
# colnames(close_price_df) <- strsplit(colnames(close_price_df),".",fixed = TRUE)[[1]][1]
colnames(close_price_df) <- lapply(col_names, function(u) strsplit(u,".",fixed = TRUE)[[1]][1])
close_price_df[is.na(close_price_df)] <- 0
# close_price_df <- close_price_df[, colSums(close_price_df != 0) > 0]
return(close_price_df)
}
slicing_data <- function(df, start_date, end_date){
time_frame <- rownames(df)
biz_start <- time_frame[time_frame >= start_date][1]
biz_end <- tail(time_frame[time_frame <= end_date],1)
biz_start_idx <- which(time_frame == biz_start)
biz_end_idx <- which(time_frame == biz_end)
return(as.data.frame(t(t(df)[, biz_start_idx:biz_end_idx])))
}
correlation <- function(stock_data, start_date, end_date){
adj_close_price <- format_close_price(stock_data)
sliced_price_df <- slicing_data(adj_close_price, start_date, end_date)
sliced_return_df <- sliced_price_df[-1,]/sliced_price_df[1:(dim(sliced_price_df)[1]-1),] - 1
sliced_return_df[is.na(sliced_return_df)] <- 0
corr <- cor(sliced_return_df)
return(corr)
}
correlation(stock_data, "2017-01-01","2017-05-01")
corr_df <- correlation(stock_data, "2017-01-01","2017-05-01")
corr_df[,"WELL"]
corr_df[,"BKNG"]
sort(corr_df[,"BKNG"],decreasing = TRUE)
sort(corr_df[,"WELL"],decreasing = TRUE)
runApp()
runApp()
runApp()
runApp()
correlation(stock_data, "2017-01-01", "2018-04-24")
corr_df<-correlation(stock_data, "2017-01-01", "2018-04-24")
corr_df[,"BRK-B"]
corr_df[,"WELL"]
format_close_price(stock_data)[,"BRK-B"]
df<-format_close_price(stock_data)
df[,"BRK-B"]
df[,"BRK.B"]
stock_data$`BRK-B`
stock_data$`MMM`
df <- as.data.frame(do.call(cbind,stock_data))
df[,'BRK-B']
df[,`BRK-B``]
df[,`BRK-B`]
colnames(df)
df[,`BRK-B.Adjusted`]
sort(colnames(df))
stock_data <- readRDS(DB_NAME)
stock_data$`BRK-B`
df <- as.data.frame(do.call(cbind,stock_data))
sort(colnames(df))
stock_data$`BRK-B`
df[,'BRK']
df<-format_close_price(stock_data)
df[,'BRK']
names(df)
runApp()
as.data.frame(do.call(cbind,stock_data))
df <- as.data.frame(do.call(cbind,stock_data))
names(df)
names(stock_data)
lapply(df,function(u) names(u))
lapply(df,function(u) colnames(u))
lapply(stock_data,function(u) names(u))
colnames(df)
grep('-', tickers, value=TRUE)
runApp()
tickers <- sp_symbols()
stock_data <- readRDS(DB_NAME)
# tickers <- names(stock_data) ## for testing only
format_close_price <- function(stock_data = stock_data){
df <- as.data.frame(do.call(cbind,stock_data))
close_price_df <- df[grepl('Adjusted{1}$',colnames(df))]
col_names <- colnames(close_price_df)
colnames(close_price_df) <- lapply(col_names, function(u) strsplit(u,".",fixed = TRUE)[[1]][1])
close_price_df[is.na(close_price_df)] <- 0
## correcting for missing - when cbind
colnames(close_price_df)[which(names(close_price_df) == "BRK")] <- "BRK-B"
colnames(close_price_df)[which(names(close_price_df) == "BF")] <- "BF-B"
return(close_price_df)
}
slicing_data <- function(df, start_date, end_date){
time_frame <- rownames(df)
biz_start <- time_frame[time_frame >= start_date][1]
biz_end <- tail(time_frame[time_frame <= end_date],1)
biz_start_idx <- which(time_frame == biz_start)
biz_end_idx <- which(time_frame == biz_end)
return(as.data.frame(t(t(df)[, biz_start_idx:biz_end_idx])))
}
correlation <- function(stock_data, start_date, end_date){
adj_close_price <- format_close_price(stock_data)
sliced_price_df <- slicing_data(adj_close_price, start_date, end_date)
sliced_return_df <- sliced_price_df[-1,]/sliced_price_df[1:(dim(sliced_price_df)[1]-1),] - 1
sliced_return_df[is.na(sliced_return_df)] <- 0
corr <- cor(sliced_return_df)
return(corr)
}
corr_df<-correlation(stock_data,"2017-01-01","2017-05-13")
corr_df[,"BRK-B"]
corr_df[,"BKNG"]
stock_data$BKNG
sorted(corr_df[,"BKNG"])
sort(corr_df[,"BKNG"])
length(sort(corr_df[,"BKNG"]))
length(sort(corr_df[,"BKNG"]))>=6
runApp()
runApp()
runApp()
runApp()
df <- as.data.frame(stock_data[["WELL"]])
slicing_data(df, "2017-01-01","2017-05-13")
runApp()
runApp()
runApp()
stock_data$BKNG
adj_close_price <- format_close_price(stock_data)
adj_close_price$BKNG
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sessionInfo（）
sessionInfo()
runApp()
runApp()
runApp()
runApp()
